"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var login_service_1 = require("~/components/login/login.service");
var AuthenticationForm = /** @class */ (function () {
    function AuthenticationForm(userService) {
        this.userService = userService;
        this.authenticationDetails = { email: "", password: "", name: "", code: "" };
        this.authenticationStatusName = "התחבר";
        this.isShowRegistrationInputs = false;
    }
    AuthenticationForm.prototype.ngOnInit = function () {
    };
    AuthenticationForm.prototype.changeEventFn = function (event) {
        console.log("Change!", this.authenticationDetails.email, event);
    };
    AuthenticationForm.prototype.authenticate = function (isValid) {
        var _this = this;
        if (isValid) {
            var user = this.authenticationDetails;
            var isUser = !!user;
            console.log(user);
            if (this.isShowRegistrationInputs) {
                this.userService.register(user).then(function (userData) {
                    console.log("register", userData);
                }).catch(function (err) {
                    _this.authenticationStatusName = "הרשם";
                    _this.isShowRegistrationInputs = true;
                });
            }
            else {
                this.userService.login(user).then(function (userData) {
                    console.log("login", userData);
                }).catch(function (err) {
                    _this.authenticationStatusName = "הרשם";
                    _this.isShowRegistrationInputs = true;
                });
            }
        }
        else {
            alert('Form is not valid..');
        }
    };
    AuthenticationForm = __decorate([
        core_1.Component({
            selector: "AuthenticationForm",
            moduleId: module.id,
            template: "\n        <StackLayout>    \n            <form name=\"authForm\" #authForm=\"ngForm\" novalidate>\n                <StackLayout>\n                    <Label class=\"t-14\" [text]=\"authenticationStatusName\"></Label>\n                </StackLayout>\n                <StackLayout class=\"auth-input-layout\">\n                    <FloatLabel (ngModelOutput)=\"authenticationDetails.email = $event\" class=\"auth-input\" id=\"email\" placeholder=\"\u05D0\u05D9\u05DE\u05D9\u05D9\u05DC\" keyboardType=\"email\" [changeEvent]=\"changeEventFn.bind(this)\" autocorrect=\"false\" autocapitalizationType=\"none\" name=\"email\"></FloatLabel>\n                </StackLayout>\n                <StackLayout class=\"auth-input-layout\">\n                    <FloatLabel (ngModelOutput)=\"authenticationDetails.password = $event\" class=\"auth-input\" placeholder=\"\u05E1\u05D9\u05E1\u05DE\u05D4\" secure=\"true\" name=\"password\"></FloatLabel>\n                </StackLayout>\n                <StackLayout [visibility]=\"isShowRegistrationInputs ? 'visible' : 'collapse'\">\n                    <StackLayout class=\"auth-input-layout\">                \n                        <FloatLabel (ngModelOutput)=\"authenticationDetails.name = $event\" class=\"auth-input\" placeholder=\"\u05E9\u05DD \u05DE\u05DC\u05D0\" type=\"text\" name=\"name\"></FloatLabel>\n                    </StackLayout>\n                    <StackLayout class=\"auth-input-layout\">                \n                        <FloatLabel (ngModelOutput)=\"authenticationDetails.code = $event\" class=\"auth-input\" placeholder=\"\u05E7\u05D5\u05D3 \u05D0\u05D9\u05E9\u05D5\u05E8\" type=\"text\" name=\"code\"></FloatLabel>\n                    </StackLayout>\n                </StackLayout>\n                \n                <Button class=\"btn btn-login btn-rounded-sm font-weight-bold t-18\" (tap)=\"authenticate(authForm.valid)\" text=\"\u05D4\u05EA\u05D7\u05D1\u05E8 / \u05D4\u05E8\u05E9\u05DD\"></Button>\n            </form>\n        </StackLayout>        \n    "
        }),
        __metadata("design:paramtypes", [login_service_1.UserService])
    ], AuthenticationForm);
    return AuthenticationForm;
}());
exports.AuthenticationForm = AuthenticationForm;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aGVudGljYXRpb24tZm9ybS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJhdXRoZW50aWNhdGlvbi1mb3JtLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHNDQUF3RTtBQUl4RSxrRUFBK0Q7QUErQi9EO0lBS0ksNEJBQW9CLFdBQXdCO1FBQXhCLGdCQUFXLEdBQVgsV0FBVyxDQUFhO1FBSnBDLDBCQUFxQixHQUFHLEVBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxRQUFRLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBQyxDQUFDO1FBQ3RFLDZCQUF3QixHQUFXLE9BQU8sQ0FBQztRQUMzQyw2QkFBd0IsR0FBWSxLQUFLLENBQUM7SUFHbEQsQ0FBQztJQUVELHFDQUFRLEdBQVI7SUFDQSxDQUFDO0lBRUQsMENBQWEsR0FBYixVQUFjLEtBQUs7UUFDZixPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMscUJBQXFCLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ3BFLENBQUM7SUFFRCx5Q0FBWSxHQUFaLFVBQWEsT0FBTztRQUFwQixpQkF5QkM7UUF4QkcsRUFBRSxDQUFBLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUNULElBQUksSUFBSSxHQUFTLElBQUksQ0FBQyxxQkFBcUIsQ0FBQztZQUM1QyxJQUFJLE1BQU0sR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDO1lBRXBCLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7WUFFbEIsRUFBRSxDQUFBLENBQUMsSUFBSSxDQUFDLHdCQUF3QixDQUFDLENBQUMsQ0FBQztnQkFDL0IsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUEsUUFBUTtvQkFDekMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsUUFBUSxDQUFDLENBQUM7Z0JBQ3RDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxVQUFBLEdBQUc7b0JBQ1IsS0FBSSxDQUFDLHdCQUF3QixHQUFHLE1BQU0sQ0FBQztvQkFDdkMsS0FBSSxDQUFDLHdCQUF3QixHQUFHLElBQUksQ0FBQztnQkFDekMsQ0FBQyxDQUFDLENBQUM7WUFDUCxDQUFDO1lBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ0osSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUEsUUFBUTtvQkFDdEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUM7Z0JBQ25DLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxVQUFBLEdBQUc7b0JBQ1IsS0FBSSxDQUFDLHdCQUF3QixHQUFHLE1BQU0sQ0FBQztvQkFDdkMsS0FBSSxDQUFDLHdCQUF3QixHQUFHLElBQUksQ0FBQztnQkFDekMsQ0FBQyxDQUFDLENBQUM7WUFDUCxDQUFDO1FBQ0wsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ0osS0FBSyxDQUFDLHFCQUFxQixDQUFDLENBQUM7UUFDakMsQ0FBQztJQUNMLENBQUM7SUF4Q1Esa0JBQWtCO1FBN0I5QixnQkFBUyxDQUFDO1lBQ1AsUUFBUSxFQUFFLG9CQUFvQjtZQUM5QixRQUFRLEVBQUUsTUFBTSxDQUFDLEVBQUU7WUFDbkIsUUFBUSxFQUFFLGcvREF3QlQ7U0FDSixDQUFDO3lDQU1tQywyQkFBVztPQUxuQyxrQkFBa0IsQ0F5QzlCO0lBQUQseUJBQUM7Q0FBQSxBQXpDRCxJQXlDQztBQXpDWSxnREFBa0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEVsZW1lbnRSZWYsIElucHV0LCBWaWV3Q2hpbGQgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5pbXBvcnQgeyBDb2xvciB9IGZyb20gXCJ0bnMtY29yZS1tb2R1bGVzL2NvbG9yXCI7XHJcbmltcG9ydCB7IFVzZXIgfSBmcm9tIFwifi9tb2RlbHMvdXNlci5tb2RlbFwiO1xyXG5pbXBvcnQgeyBOYXRpdmVTY3JpcHRGb3Jtc01vZHVsZSB9IGZyb20gXCJuYXRpdmVzY3JpcHQtYW5ndWxhci9mb3Jtc1wiO1xyXG5pbXBvcnQgeyBVc2VyU2VydmljZSB9IGZyb20gXCJ+L2NvbXBvbmVudHMvbG9naW4vbG9naW4uc2VydmljZVwiO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogXCJBdXRoZW50aWNhdGlvbkZvcm1cIixcclxuICAgIG1vZHVsZUlkOiBtb2R1bGUuaWQsXHJcbiAgICB0ZW1wbGF0ZTogYFxyXG4gICAgICAgIDxTdGFja0xheW91dD4gICAgXHJcbiAgICAgICAgICAgIDxmb3JtIG5hbWU9XCJhdXRoRm9ybVwiICNhdXRoRm9ybT1cIm5nRm9ybVwiIG5vdmFsaWRhdGU+XHJcbiAgICAgICAgICAgICAgICA8U3RhY2tMYXlvdXQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPExhYmVsIGNsYXNzPVwidC0xNFwiIFt0ZXh0XT1cImF1dGhlbnRpY2F0aW9uU3RhdHVzTmFtZVwiPjwvTGFiZWw+XHJcbiAgICAgICAgICAgICAgICA8L1N0YWNrTGF5b3V0PlxyXG4gICAgICAgICAgICAgICAgPFN0YWNrTGF5b3V0IGNsYXNzPVwiYXV0aC1pbnB1dC1sYXlvdXRcIj5cclxuICAgICAgICAgICAgICAgICAgICA8RmxvYXRMYWJlbCAobmdNb2RlbE91dHB1dCk9XCJhdXRoZW50aWNhdGlvbkRldGFpbHMuZW1haWwgPSAkZXZlbnRcIiBjbGFzcz1cImF1dGgtaW5wdXRcIiBpZD1cImVtYWlsXCIgcGxhY2Vob2xkZXI9XCLXkNeZ157XmdeZ15xcIiBrZXlib2FyZFR5cGU9XCJlbWFpbFwiIFtjaGFuZ2VFdmVudF09XCJjaGFuZ2VFdmVudEZuLmJpbmQodGhpcylcIiBhdXRvY29ycmVjdD1cImZhbHNlXCIgYXV0b2NhcGl0YWxpemF0aW9uVHlwZT1cIm5vbmVcIiBuYW1lPVwiZW1haWxcIj48L0Zsb2F0TGFiZWw+XHJcbiAgICAgICAgICAgICAgICA8L1N0YWNrTGF5b3V0PlxyXG4gICAgICAgICAgICAgICAgPFN0YWNrTGF5b3V0IGNsYXNzPVwiYXV0aC1pbnB1dC1sYXlvdXRcIj5cclxuICAgICAgICAgICAgICAgICAgICA8RmxvYXRMYWJlbCAobmdNb2RlbE91dHB1dCk9XCJhdXRoZW50aWNhdGlvbkRldGFpbHMucGFzc3dvcmQgPSAkZXZlbnRcIiBjbGFzcz1cImF1dGgtaW5wdXRcIiBwbGFjZWhvbGRlcj1cIteh15nXodee15RcIiBzZWN1cmU9XCJ0cnVlXCIgbmFtZT1cInBhc3N3b3JkXCI+PC9GbG9hdExhYmVsPlxyXG4gICAgICAgICAgICAgICAgPC9TdGFja0xheW91dD5cclxuICAgICAgICAgICAgICAgIDxTdGFja0xheW91dCBbdmlzaWJpbGl0eV09XCJpc1Nob3dSZWdpc3RyYXRpb25JbnB1dHMgPyAndmlzaWJsZScgOiAnY29sbGFwc2UnXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPFN0YWNrTGF5b3V0IGNsYXNzPVwiYXV0aC1pbnB1dC1sYXlvdXRcIj4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxGbG9hdExhYmVsIChuZ01vZGVsT3V0cHV0KT1cImF1dGhlbnRpY2F0aW9uRGV0YWlscy5uYW1lID0gJGV2ZW50XCIgY2xhc3M9XCJhdXRoLWlucHV0XCIgcGxhY2Vob2xkZXI9XCLXqdedINee15zXkFwiIHR5cGU9XCJ0ZXh0XCIgbmFtZT1cIm5hbWVcIj48L0Zsb2F0TGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9TdGFja0xheW91dD5cclxuICAgICAgICAgICAgICAgICAgICA8U3RhY2tMYXlvdXQgY2xhc3M9XCJhdXRoLWlucHV0LWxheW91dFwiPiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgPEZsb2F0TGFiZWwgKG5nTW9kZWxPdXRwdXQpPVwiYXV0aGVudGljYXRpb25EZXRhaWxzLmNvZGUgPSAkZXZlbnRcIiBjbGFzcz1cImF1dGgtaW5wdXRcIiBwbGFjZWhvbGRlcj1cIten15XXkyDXkNeZ16nXldeoXCIgdHlwZT1cInRleHRcIiBuYW1lPVwiY29kZVwiPjwvRmxvYXRMYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICA8L1N0YWNrTGF5b3V0PlxyXG4gICAgICAgICAgICAgICAgPC9TdGFja0xheW91dD5cclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgPEJ1dHRvbiBjbGFzcz1cImJ0biBidG4tbG9naW4gYnRuLXJvdW5kZWQtc20gZm9udC13ZWlnaHQtYm9sZCB0LTE4XCIgKHRhcCk9XCJhdXRoZW50aWNhdGUoYXV0aEZvcm0udmFsaWQpXCIgdGV4dD1cIteU16rXl9eR16ggLyDXlNeo16nXnVwiPjwvQnV0dG9uPlxyXG4gICAgICAgICAgICA8L2Zvcm0+XHJcbiAgICAgICAgPC9TdGFja0xheW91dD4gICAgICAgIFxyXG4gICAgYFxyXG59KVxyXG5leHBvcnQgY2xhc3MgQXV0aGVudGljYXRpb25Gb3JtIHsgICAgXHJcbiAgICBwcml2YXRlIGF1dGhlbnRpY2F0aW9uRGV0YWlscyA9IHtlbWFpbDogXCJcIiwgcGFzc3dvcmQ6IFwiXCIsIG5hbWU6IFwiXCIsIGNvZGU6IFwiXCJ9O1xyXG4gICAgcHJpdmF0ZSBhdXRoZW50aWNhdGlvblN0YXR1c05hbWU6IHN0cmluZyA9IFwi15TXqteX15HXqFwiO1xyXG4gICAgcHJpdmF0ZSBpc1Nob3dSZWdpc3RyYXRpb25JbnB1dHM6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHVzZXJTZXJ2aWNlOiBVc2VyU2VydmljZSkge1xyXG4gICAgfVxyXG5cclxuICAgIG5nT25Jbml0KCk6IHZvaWQge1xyXG4gICAgfVxyXG5cclxuICAgIGNoYW5nZUV2ZW50Rm4oZXZlbnQpIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhcIkNoYW5nZSFcIiwgdGhpcy5hdXRoZW50aWNhdGlvbkRldGFpbHMuZW1haWwsIGV2ZW50KTtcclxuICAgIH1cclxuXHJcbiAgICBhdXRoZW50aWNhdGUoaXNWYWxpZCkge1xyXG4gICAgICAgIGlmKGlzVmFsaWQpIHtcclxuICAgICAgICAgICAgbGV0IHVzZXI6IFVzZXIgPSB0aGlzLmF1dGhlbnRpY2F0aW9uRGV0YWlscztcclxuICAgICAgICAgICAgbGV0IGlzVXNlciA9ICEhdXNlcjtcclxuICAgIFxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyh1c2VyKTtcclxuXHJcbiAgICAgICAgICAgIGlmKHRoaXMuaXNTaG93UmVnaXN0cmF0aW9uSW5wdXRzKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnVzZXJTZXJ2aWNlLnJlZ2lzdGVyKHVzZXIpLnRoZW4odXNlckRhdGEgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwicmVnaXN0ZXJcIiwgdXNlckRhdGEpO1xyXG4gICAgICAgICAgICAgICAgfSkuY2F0Y2goZXJyID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmF1dGhlbnRpY2F0aW9uU3RhdHVzTmFtZSA9IFwi15TXqNep151cIjtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmlzU2hvd1JlZ2lzdHJhdGlvbklucHV0cyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9KTsgIFxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy51c2VyU2VydmljZS5sb2dpbih1c2VyKS50aGVuKHVzZXJEYXRhID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImxvZ2luXCIsIHVzZXJEYXRhKTtcclxuICAgICAgICAgICAgICAgIH0pLmNhdGNoKGVyciA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hdXRoZW50aWNhdGlvblN0YXR1c05hbWUgPSBcIteU16jXqdedXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc1Nob3dSZWdpc3RyYXRpb25JbnB1dHMgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfSk7ICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBhbGVydCgnRm9ybSBpcyBub3QgdmFsaWQuLicpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iXX0=